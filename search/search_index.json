{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Markup language and information management systems \u00b6 This professional module is taught in the first year of the Vocational Training Course to get the certificated of Higher Technician in Web Application Development. Learning outcomes \u00b6 By the end of the year students must be able to: Recognise the characteristics of the markup language analysing and interpreting code fragments. Use markup languages for the transmission of information through the web analysing the structure of documents and identifying their elements.\uf02d* Create content channels analysing and using syndication technologies. Establish validation mechanisms for XML documents using methods to define their syntax and structure. Carry out conversions of XML documents using processing techniques and tools. Manage information in XML format analysing and using storage technologies and query languages. Work with business information management systems carrying out tasks of import, integration, assurance and extraction of information.","title":"Markup language and information management systems"},{"location":"#markup-language-and-information-management-systems","text":"This professional module is taught in the first year of the Vocational Training Course to get the certificated of Higher Technician in Web Application Development.","title":"Markup language and information management systems"},{"location":"#learning-outcomes","text":"By the end of the year students must be able to: Recognise the characteristics of the markup language analysing and interpreting code fragments. Use markup languages for the transmission of information through the web analysing the structure of documents and identifying their elements.\uf02d* Create content channels analysing and using syndication technologies. Establish validation mechanisms for XML documents using methods to define their syntax and structure. Carry out conversions of XML documents using processing techniques and tools. Manage information in XML format analysing and using storage technologies and query languages. Work with business information management systems carrying out tasks of import, integration, assurance and extraction of information.","title":"Learning outcomes"},{"location":"01.%20Markup%20languages.%20XML/00_index/","text":"Introduction \u00b6 Objectives \u00b6 By the end of the unit, students will be able to: Know the markup languages. Identify their advantages and main uses. Recognise their common characteristics. Know how markup languages are classified. Create well formatted XML documents. Recognise the need to use namespaces. Contents \u00b6 Concept of markup language. Advantatges. Common characteristics. Identification of areas of application. Classification. XML: structure and syntax. Tags. Editing tools. Creation of well-formed documents. Use of XML namespaces.","title":"Introduction"},{"location":"01.%20Markup%20languages.%20XML/00_index/#introduction","text":"","title":"Introduction"},{"location":"01.%20Markup%20languages.%20XML/00_index/#objectives","text":"By the end of the unit, students will be able to: Know the markup languages. Identify their advantages and main uses. Recognise their common characteristics. Know how markup languages are classified. Create well formatted XML documents. Recognise the need to use namespaces.","title":"Objectives"},{"location":"01.%20Markup%20languages.%20XML/00_index/#contents","text":"Concept of markup language. Advantatges. Common characteristics. Identification of areas of application. Classification. XML: structure and syntax. Tags. Editing tools. Creation of well-formed documents. Use of XML namespaces.","title":"Contents"},{"location":"01.%20Markup%20languages.%20XML/01_llenguatges/","text":"1. Markup language \u00b6 Concept of markup language \u00b6 Markup languages are ways of annotating an electronic document. Usually markup will either specify how something should be displayed or what something means. The origin of the term is in typesetting, where proofs were marked up with instructions about their visual appearance, but the term then broadened to include the semantic perspective that we\u2019re interested in here. The names of the most popular languages usually end with Markup Language and so are abbreviated as something-ML: for example, HTML \u2013 Hypertext Markup Language KML \u2013 Keyhole Markup Language MathML \u2013 Mathematical Markup Language SGML \u2013 Standard Generalized Markup Language XHTML \u2013 eXtensible Hypertext Markup Language XML \u2013 eXtensible Markup Language The most widely used markup language is HTML (HyperText Markup Language), the foundation of the World Wide Web. Some examples are: HTML 4.0 < h1 > Anatidae </ h1 > < p > The family < i > Anatidae </ i > includes ducks, geese, and swans, but < em > not </ em > the closely related screamers. </ p > XML <?xml version=\"1.0\" encoding=\"UTF-8\"?> <note> <to> Tove </to> <from> Jani </from> <heading> Reminder </heading> <body> Don't forget me this weekend! </body> </note> Advantages \u00b6 Initially, markup languages \u200b\u200bfocused on document generation but thanks to its advantages its use has been extended to definition of data structures and sharing of information. The main advantages are: Ease of creation and reading. Compliance with defined and public storage standards. Incorporation of metadata. Definition of the structure of the data. Common features \u00b6 Markup languages \u200b\u200bhave stood out for a number of features which lead them to become the most widely used types of languages \u200b\u200bin modern computing for storing and representing data. Among the most interesting features that markup languages \u200b\u200boffer are: They intermix the text of a document with markup instructions in the same data stream or file. They are based on plain text. They allow the use of metadata. They are easy to interpret and process. They are easy to create and flexible enough to represent very diverse data. Internet applications and many of the computer programs use them in one way or another. Fields of applicacion \u00b6 While the idea of markup language originated with text documents, there is an increasing use of markup languages in the presentation of other types of information, including playlists, vector graphics, web services, content syndication, and user interfaces. Most of these are XML applications, because XML is a well-defined and extensible language. Regarding the fields of application we can define the following classification: Documents in general: Descriptive languages \u200b\u200bsuch as XML, HTML 5, YAML. Presentation languages \u200b\u200bsuch as RTF, Tex, HTML 4. Lightweight languages \u200b\u200blike Markdown Internet technologies: HTML, XHTML, GladeXML, Atom, RSS, WSDL Specialized languages: SVG, XMPP, COLLADA In Markup language you will find more information. Types of markup language \u00b6 There are three main general categoris of electronic markup: Presentation languages\u200b\u200b , aimed at specifying how the information must be represented. This kind of markup is used by traditional word-processing systems. Procedural markup . Markup is embedded in text which provides instructions for programs to process the text. Well-known examples include troff, TeX, and PostScript. Descriptive or semantic languages\u200b\u200b : aimed at describing the structure of the data it contains. This is the most accepted classification, but as is often the case in the field of Computer Science, we can find languages \u200b\u200bthat have aspects of these categories and allow them to define the way the information is presented and to define it the structure. In the recent years, a number of small and largely unstandardized markup languages have been developed to allow authors to create formatted text via web browsers, such as the ones used in wikis and in web forums. These are sometimes called lightweight markup languages . Markdown, BBCode, and the markup language used by Wikipedia are examples of such languages. Procedural and presentation \u00b6 In these languages, what is done is to indicate how to do it the presentation of the data. Either through design information (mark bold, titles, etc.) or procedures to be performed by the software representation. The most popular example of these languages \u200b\u200bis HTML, but there are some there are many more: TeX, Wikitext ... In these cases the documents can help us to determine in what way the document will be shown to whoever reads it. Latex: a procedural markup language \u00b6 For example: \\documentclass { article } \\usepackage { graphicx } \\begin { document } \\title { Introduction to LaTeX {}} \\author { Author's Name } \\maketitle \\begin { abstract } The abstract text goes here. \\end { abstract } \\section { Introduction } Here is the text of your introduction. \\begin { equation } \\label { simple _ equation } \\alpha = \\sqrt { \\beta } \\end { equation } \\subsection { Subsection Heading Here } Write your subsection text here. \\begin { figure } \\centering \\includegraphics [width = 3.0in] { myfigure } \\caption { Simulation Results } \\label { simulationfigure } \\end { figure } \\section { Conclusion } Write your conclusion here. \\end { document } Descriptive or semantic \u00b6 These languages \u200b\u200bdescribe the logical structure of the document ignoring how it will be represented in the programs. Only the marks are put with the aim of defining the parts that give structure to the document. The example more important is XML but there are others that are having a lot of support, such as for example JSON. In the following document we have an example of a file of marks that represents information about people: <students> <person> <name> Pere </name> <lastname> Puig </lastname> </person> <person> <name> Manel </name> <lastname> Garcia </lastname> </person> </students> We can clearly notice what this data is about: a list of students. At a glance, it is easy to determine that Pere and Manel are names and that Puig and Garcia are surnames. But through the hierarchy of data it can be inferred that Pere Puig and Manel Garcia are students as both first and last name are included inside of the students tag. This document shows the structure of the data it contains and also this can also be discovered by interpreting the labels their content semantic. From the knowledge we have it follows that Peter is the name of a person who is a student. Task 1. Activities Compare the export options when saving a document in LibreOffice Writer. Type the following text in a plain text file, myfile.txt : < h1 > level 1 header </ h1 > < h3 > level 3 header </ h3 > Open this file with your browser. How does it look? Change the file extension to html. Does it show the same information? Why? Search the Internet for a classification of markup languages. Write down 3 examples of each type specifying their main use. Go to openclipart.org , search for \"8 ball\", download the simplest image you see. Open it with the text editor. Can you undestand the structure? Try to change the color of the ball (hint: the colors are formatted: #000000). Bibliography, webgraphy and credits \u00b6 https://port.sas.ac.uk/course/view.php?id=54&section=1 https://en.wikipedia.org/wiki/Markup_language https://www.youtube.com/watch?v=nQZEP8hENMs","title":"1. Markup language"},{"location":"01.%20Markup%20languages.%20XML/01_llenguatges/#1-markup-language","text":"","title":"1. Markup language"},{"location":"01.%20Markup%20languages.%20XML/01_llenguatges/#concept-of-markup-language","text":"Markup languages are ways of annotating an electronic document. Usually markup will either specify how something should be displayed or what something means. The origin of the term is in typesetting, where proofs were marked up with instructions about their visual appearance, but the term then broadened to include the semantic perspective that we\u2019re interested in here. The names of the most popular languages usually end with Markup Language and so are abbreviated as something-ML: for example, HTML \u2013 Hypertext Markup Language KML \u2013 Keyhole Markup Language MathML \u2013 Mathematical Markup Language SGML \u2013 Standard Generalized Markup Language XHTML \u2013 eXtensible Hypertext Markup Language XML \u2013 eXtensible Markup Language The most widely used markup language is HTML (HyperText Markup Language), the foundation of the World Wide Web. Some examples are: HTML 4.0 < h1 > Anatidae </ h1 > < p > The family < i > Anatidae </ i > includes ducks, geese, and swans, but < em > not </ em > the closely related screamers. </ p > XML <?xml version=\"1.0\" encoding=\"UTF-8\"?> <note> <to> Tove </to> <from> Jani </from> <heading> Reminder </heading> <body> Don't forget me this weekend! </body> </note>","title":"Concept of markup language"},{"location":"01.%20Markup%20languages.%20XML/01_llenguatges/#advantages","text":"Initially, markup languages \u200b\u200bfocused on document generation but thanks to its advantages its use has been extended to definition of data structures and sharing of information. The main advantages are: Ease of creation and reading. Compliance with defined and public storage standards. Incorporation of metadata. Definition of the structure of the data.","title":"Advantages"},{"location":"01.%20Markup%20languages.%20XML/01_llenguatges/#common-features","text":"Markup languages \u200b\u200bhave stood out for a number of features which lead them to become the most widely used types of languages \u200b\u200bin modern computing for storing and representing data. Among the most interesting features that markup languages \u200b\u200boffer are: They intermix the text of a document with markup instructions in the same data stream or file. They are based on plain text. They allow the use of metadata. They are easy to interpret and process. They are easy to create and flexible enough to represent very diverse data. Internet applications and many of the computer programs use them in one way or another.","title":"Common features"},{"location":"01.%20Markup%20languages.%20XML/01_llenguatges/#fields-of-applicacion","text":"While the idea of markup language originated with text documents, there is an increasing use of markup languages in the presentation of other types of information, including playlists, vector graphics, web services, content syndication, and user interfaces. Most of these are XML applications, because XML is a well-defined and extensible language. Regarding the fields of application we can define the following classification: Documents in general: Descriptive languages \u200b\u200bsuch as XML, HTML 5, YAML. Presentation languages \u200b\u200bsuch as RTF, Tex, HTML 4. Lightweight languages \u200b\u200blike Markdown Internet technologies: HTML, XHTML, GladeXML, Atom, RSS, WSDL Specialized languages: SVG, XMPP, COLLADA In Markup language you will find more information.","title":"Fields of applicacion"},{"location":"01.%20Markup%20languages.%20XML/01_llenguatges/#types-of-markup-language","text":"There are three main general categoris of electronic markup: Presentation languages\u200b\u200b , aimed at specifying how the information must be represented. This kind of markup is used by traditional word-processing systems. Procedural markup . Markup is embedded in text which provides instructions for programs to process the text. Well-known examples include troff, TeX, and PostScript. Descriptive or semantic languages\u200b\u200b : aimed at describing the structure of the data it contains. This is the most accepted classification, but as is often the case in the field of Computer Science, we can find languages \u200b\u200bthat have aspects of these categories and allow them to define the way the information is presented and to define it the structure. In the recent years, a number of small and largely unstandardized markup languages have been developed to allow authors to create formatted text via web browsers, such as the ones used in wikis and in web forums. These are sometimes called lightweight markup languages . Markdown, BBCode, and the markup language used by Wikipedia are examples of such languages.","title":"Types of markup language"},{"location":"01.%20Markup%20languages.%20XML/01_llenguatges/#procedural-and-presentation","text":"In these languages, what is done is to indicate how to do it the presentation of the data. Either through design information (mark bold, titles, etc.) or procedures to be performed by the software representation. The most popular example of these languages \u200b\u200bis HTML, but there are some there are many more: TeX, Wikitext ... In these cases the documents can help us to determine in what way the document will be shown to whoever reads it.","title":"Procedural and presentation"},{"location":"01.%20Markup%20languages.%20XML/01_llenguatges/#latex-a-procedural-markup-language","text":"For example: \\documentclass { article } \\usepackage { graphicx } \\begin { document } \\title { Introduction to LaTeX {}} \\author { Author's Name } \\maketitle \\begin { abstract } The abstract text goes here. \\end { abstract } \\section { Introduction } Here is the text of your introduction. \\begin { equation } \\label { simple _ equation } \\alpha = \\sqrt { \\beta } \\end { equation } \\subsection { Subsection Heading Here } Write your subsection text here. \\begin { figure } \\centering \\includegraphics [width = 3.0in] { myfigure } \\caption { Simulation Results } \\label { simulationfigure } \\end { figure } \\section { Conclusion } Write your conclusion here. \\end { document }","title":"Latex: a procedural markup language"},{"location":"01.%20Markup%20languages.%20XML/01_llenguatges/#descriptive-or-semantic","text":"These languages \u200b\u200bdescribe the logical structure of the document ignoring how it will be represented in the programs. Only the marks are put with the aim of defining the parts that give structure to the document. The example more important is XML but there are others that are having a lot of support, such as for example JSON. In the following document we have an example of a file of marks that represents information about people: <students> <person> <name> Pere </name> <lastname> Puig </lastname> </person> <person> <name> Manel </name> <lastname> Garcia </lastname> </person> </students> We can clearly notice what this data is about: a list of students. At a glance, it is easy to determine that Pere and Manel are names and that Puig and Garcia are surnames. But through the hierarchy of data it can be inferred that Pere Puig and Manel Garcia are students as both first and last name are included inside of the students tag. This document shows the structure of the data it contains and also this can also be discovered by interpreting the labels their content semantic. From the knowledge we have it follows that Peter is the name of a person who is a student. Task 1. Activities Compare the export options when saving a document in LibreOffice Writer. Type the following text in a plain text file, myfile.txt : < h1 > level 1 header </ h1 > < h3 > level 3 header </ h3 > Open this file with your browser. How does it look? Change the file extension to html. Does it show the same information? Why? Search the Internet for a classification of markup languages. Write down 3 examples of each type specifying their main use. Go to openclipart.org , search for \"8 ball\", download the simplest image you see. Open it with the text editor. Can you undestand the structure? Try to change the color of the ball (hint: the colors are formatted: #000000).","title":"Descriptive or semantic"},{"location":"01.%20Markup%20languages.%20XML/01_llenguatges/#bibliography-webgraphy-and-credits","text":"https://port.sas.ac.uk/course/view.php?id=54&section=1 https://en.wikipedia.org/wiki/Markup_language https://www.youtube.com/watch?v=nQZEP8hENMs","title":"Bibliography, webgraphy and credits"},{"location":"01.%20Markup%20languages.%20XML/02_xml/","text":"2. XML \u00b6 Introduction \u00b6 Extensible Markup Language (XML) is a markup language that defines a set of rules for encoding documents in a format that is both human-readable and machine-readable. The World Wide Web Consortium's XML 1.0 Specification of 1998 and several other related specifications\u2014all of them free open standards\u2014define XML. The design goals of XML emphasize simplicity, generality, and usability across the Internet.It is a textual data format with strong support via Unicode for different human languages. Although the design of XML focuses on documents, the language is widely used for the representation of arbitrary data structures such as those used in web services. World Web Consortium The World Wide Web Consortium (W3C) is the main international standards organization for the World Wide Web. Founded in 1994 and currently led by Tim Berners-Lee, the consortium is made up of member organizations that maintain full-time staff working together in the development of standards for the World Wide Web. As of 21 October 2019, W3C had 443 members. W3C also engages in education and outreach, develops software and serves as an open forum for discussion about the Web. XML is a markup language similar to HTML, but without predefined tags to use. Instead, you define your own tags (extensible) designed specifically for your needs. This is a powerful way to store data in a format that can be stored, searched, and shared. Most importantly, since the fundamental format of XML is standardized, if you share or transmit XML across systems or platforms, either locally or over the internet, the recipient can still parse the data due to the standardized XML syntax. These are some languages based on XML: GML ( Geography Markup Language ). MathML ( Mathematical Markup Language ). RSS ( Really Simple Syndication ). SVG ( Scalable Vector Graphics ). XHTML ( eXtensible HyperText Markup Language ). Key terminology \u00b6 The material in this section is based on the XML Specification. This is not an exhaustive list of all the constructs that appear in XML; it provides an introduction to the key constructs most often encountered in day-to-day use. Character \u00b6 An XML document is a string of characters. Almost every legal Unicode character may appear in an XML document. Processor and application \u00b6 The processor analyzes the markup and passes structured information to an application. The specification places requirements on what an XML processor must do and not do, but the application is outside its scope. The processor (as the specification calls it) is often referred to colloquially as an XML parser. Markup and content \u00b6 The characters making up an XML document are divided into markup and content, which may be distinguished by the application of simple syntactic rules. Generally, strings that constitute markup either begin with the character < and end with a > , or they begin with the character & and end with a ; . Strings of characters that are not markup are content. However, in a CDATA section, the delimiters <![CDATA[ and ]]> are classified as markup, while the text between them is classified as content. In addition, whitespace before and after the outermost element is classified as markup. Tag \u00b6 A tag is a markup construct that begins with < and ends with > . Tags come in three flavors: start-tag, such as <section> ; end-tag, such as </section> ; empty-element tag, such as <line-break /> . Element \u00b6 An element is a logical document component that either begins with a start-tag and ends with a matching end-tag or consists only of an empty-element tag. The characters between the start-tag and end-tag, if any, are the element's content, and may contain markup, including other elements, which are called child elements. An example is <greeting>Hello, world!</greeting> . Another is <line-break /> . Attribute \u00b6 An attribute is a markup construct consisting of a name\u2013value pair that exists within a start-tag or empty-element tag. An example is <img src=\"madonna.jpg\" alt=\"Madonna\" /> , where the names of the attributes are \"src\" and \"alt\" , and their values are \"madonna.jpg\" and \"Madonna\" respectively. Another example is <step number=\"3\">Connect A to B.</step> , where the name of the attribute is \"number\" and its value is \"3\" . An XML attribute can only have a single value and each attribute can appear at most once on each element. In the common situation where a list of multiple values is desired, this must be done by encoding the list into a well-formed XML attribute with some format beyond what XML defines itself. Usually this is either a comma or semi-colon delimited list or, if the individual values are known not to contain spaces, a space-delimited list can be used. <div class=\"inner greeting-box\">Welcome!</div> , where the attribute \"class\" has both the value \"inner greeting-box\" and also indicates the two CSS class names \"inner\" and \"greeting-box\" . XML declaration \u00b6 XML documents may begin with an XML declaration that describes some information about themselves. An example is <?xml version=\"1.0\" encoding=\"UTF-8\"?> . Entities \u00b6 Like HTML, XML offers methods (called entities) for referring to some special reserved characters (such as a greater than sign which is used for tags). There are five of these characters that you should know: Character Description Entity < lt ( less than ) &lt; > gt ( greater than ) &gt; \" quot ( quotation mark ) &quot; ' apos ( apostrophe ) &apos; & (ampersand) amp ( ampersand ) &amp; Given the \"entities.xml\" file: <? xml version = \"1.0\" encoding = \"UTF-8\"?> <entities> <less_than> &lt; </less_than> <greater_than> &gt; </greater_than> <double_quote> &quot; </double_quote> <simple_quote> &apos; </simple_quote> <ampersand> &amp; </ampersand> </entities> When you open it in Google Chrome you can see: In the web browser, you can see where the references to entities have been written in the XML document (for example), the corresponding characters are displayed (for example <). Structure and syntax \u00b6 XML documents are composed by plain text and tags defined by developers. Elements are represented by tags . If we want to save people's name we should write: <name> Elsa </name> This is the basic syntax in order to write an XML elemente: <tag> text </tag> It is important to remark that between the start tag ( <stag> ) and the end tag ( </tag> ) we have written the data ( text ) we would storage. Elsa in the example. Empty tags \u00b6 In a XML document an element could not contain any value. If so, we should write: <tag></tag> A simpler alternative way of writing this is kind of elements is: <tag /> To write an empty element name , we should write: <name></name> Or: <name /> Relation between parent and childs \u00b6 An parent element could contain one or many elements: <people> <name> Elsa </name> <woman /> <birthday> <day> 18 </day> <month> 6 </month> <year> 1996 </year> </birthday> <city> Pamplona </city> </people> In this example, the people element contains four elements (children): \"name\", \"woman\", \"birthday\" and \"city\". In addition, the \"birthday\" element contains three elements (children): \"day\", \"month\" and \"year\". Notice that of all the elements in this example, only the \"woman\" element is empty. Root element \u00b6 Each XML document has exactly one single root element . It encloses all the other elements and is therefore the sole parent element to all the other elements. ROOT elements are also called document elements. In HTML, the root element is the <html> element. In our example, the people element is the document root. Graphically, we could represent it: graph TD A[people] --> B[name] A[people] --> C[woman] A[people] --> D[birthday] A[people] --> E[city] D --> F[day] D --> G[month] D --> H[year] In this way, the structure of any XML document can be represented as an inverted tree of elements. It is said that the elements are the ones that give semantic structure to the document. Elements with mixed content \u00b6 An element type has mixed content when elements of that type may contain character data, optionally interspersed with child elements. In this case, the types of the child elements may be constrained, but not their order or their number of occurrences: <description> character data <br/> more text <br/> and <strong> more data </strong> </description> Mixed content is a very effective way of marking up textual data, the most obvious example being HTML. XML Syntax Rules \u00b6 You must follow these rules when you create XML syntax: All XML elements must have a closing tag. XML tags are case sensitive. All XML elements must be properly nested. All XML documents must have a root element. Attribute values must always be quoted. All XML elements must have a closing tag \u00b6 It is illegal to omit the closing tag when you are creating XML syntax. XML elements must have a closing tag. Incorrect: <body> See Spot run. <body> See Spot catch the ball. Correct: <body> See Spot run. </body> <body> See Spot catch the ball. </body> All XML elements must be properly nested \u00b6 Improper nesting of tags makes no sense to XML. Incorrect: <b><i>This text is bold and italic.</b></i> Correct: <b><i> This text is bold and italic. </i></b> All XML documents must have a root element \u00b6 All XML documents must contain a single tag pair to define a root element. All other elements must be within this root element. All elements can have sub elements (child elements). Sub elements must be correctly nested within their parent element. Example: <root> <child> <subchild> ..... </subchild> </child> </root> Attribute values must always be quoted \u00b6 It is illegal to omit quotation marks around attribute values. XML elements can have attributes in name/value pairs; however, the attribute value must always be quoted. Incorrect: <?xml version= \u201c1.0\u201d encoding=\u201cISO-8859-1\u201d?> <note date= 05/05/05 > <to> Dick </to> <from> Jane </from> </note> Correct: <?xml version= \u201c1.0\u201d encoding=\u201cISO-8859-1\u201d?> <note date= \u201d05/05/05\u201d > <to> Dick </to> <from> Jane </from> </note> In the incorrect document, the date attribute in the note element is not quoted. XML tags are case sensitive \u00b6 When you create XML documents, the tag is different from the tag . Incorrect: <Body>See Spot run.</body> Correct: <body> See Spot run. </body> In addition, they have to fullfil the follow rules: They can contain lowercase letters, uppercase letters, numbers, periods \".\", hyphens \"-\" and underscores \"_\". They can also contain the colon \":\". However, its use is reserved for when define namespaces. The first character must be a letter or a hyphen under \"_\". The following elements are breaking some rules: <ciudad> Pamplona </ciudad> <d\u00eda> 18 </dia> <mes> 6 <mes/> <ciudad> Pamplona </finciudad> <_rojo> <2colores> Rojo y Naranja </2colores> <persona><nombre> Elsa </persona></nombre> <color favorito > azul < /color favorito> We must write them: <ciudad> Pamplona </ciudad> <d\u00eda> 18 </d\u00eda> <mes> 6 </mes> <ciudad> Pamplona </ciudad> <_rojo/> <colores2> Rojo y Naranja </colores2> <Aficiones > Cine, Bailar, Nadar </Aficiones > <persona><nombre> Elsa </nombre></persona> <color.favorito> azul </color.favorito> <color-favorito> azul </color-favorito> <color_favorito> azul </color_favorito> Non-English letters (\u00e1, \u00c1, \u00f1, \u00d1 ...) are allowed. However, it is advisable not to use them in order to reduce possible incompatibilities with programs that may not recognize them. As for the hyphen - and period . characters, although they are also allowed to name tags, it is also advisable to avoid its use. Attributes in XML \u00b6 Elements of an XML document can have attributes defined in the start tag. An attribute serves to provide extra information about the item that contains it. Given the following data for a product: Code: G45 Name: Wool hat Color: black Price: 12.56 Its representation in an XML document could be, for example: <product code = \"G45\" > <name color = \"black\" price = \"12.56\" > Wool hat </ name> </ product> In this example three attributes have been written: code, color and price. It should be noted that, its values \u200b\u200b(\"G45\", \"black\" and \"12.56\") have been enclosed in double quotes (\"). However, they can also be enclosed in single quotes ('). If, for example, the code attribute were to be represented as an element, it could be written: <product> <code> G45 </code> <name color = \"black\" price = \"12.56\" > Wool hat </ name> </ product> As you can see, now the value of the code has not been written in double quotes. Elements and attributes \u00b6 An element is a logical component of an XML document. The elements usually have their own entity. The content of an item is everything between the opening and closing tags, even if they contain other elements (children). In contrast, attributes usually represent properties or characteristics of elements. Syntax rules \u00b6 Attribute names must meet the same syntax rules as element names. In addition, all attributes of an element must be unique. For example, it is incorrect to write: <data x= \"3\" x= \"4\" i= \"5\" /> However, it is correct to write: <data x= \"3\" X= \"4\" i= \"5\" /> Attributes contained in an element, as in this case x, X and y, must be separated by whitespace, and is not significant his order. XML declaration \u00b6 The XML declaration that can be written at the beginning of an XML document begins with the characters \"<?\" and ends with \"?>\". Version and coding \u00b6 An XML document could contain the following XML declaration: <? xml version = \"1.0\" encoding = \"UTF-8\"?> In this XML statement, you are indicating that 1.0 is the version of XML used in the document and UTF-8 (8-bit Unicode Transformation Format , 8-bit Unicode Transformation Format) is the character encoding employee. An XML declaration is not required to appear in an XML document. However, if it includes it, it must appear in the first line of the document, and the \"<\" character must be the first of that line, that is, blank spaces cannot appear before. standalone attribute \u00b6 In an XML declaration, in addition to the version and encoding of the attributes, the standalone attribute can also be written, which can take two values \u200b\u200b(\"yes\" or \"no\"): <?xml version = \"1.0\" encoding = \"UTF-8\" standalone = \"yes\"?> Typing standalone =\" yes \" indicates that the document is independent of others, such as one DTD ( Document Type Definition , external Definition (or we will see later). Otherwise, would mean that the document is not independent. In an XML document, writing the XML declaration is optional. But, if written, the version attribute is required. However, the encoding and standalone attributes are optional, and by default their values \u200b\u200bare \"UTF-8\" and \"no\". respectively. On the other hand, when typing the encoding attribute, it should always appear after the version. And, the attribute standalone , as long as it exists, must be in the last place. Problematic characters in XML: less than (<) and ampersand (&) \u00b6 In an XML document, the \"<\" character is problematic because it indicates the beginning of a tag. So, instead of writing, for example: <condition> a < b </condition > The entity reference should be used by typing: <condition> a &lt; b </condition> The > character can be used in the text contained in an element, and it is not incorrect to write, for example: <condition> a > b </condition> However, it is recommended to use your entity reference ( &gt; ). In an XML document, the ampersand character is also problematic, as it is used to indicate the beginning of an reference to entity. For example, it is incorrect to write: <condition> a==1 && b==2 </condition> Instead, write the following: <condition> a==1 &amp;&amp; b==2 </condition> Character references in XML \u00b6 Unicode character references with &# symbols can be written in an XML document, followed by the decimal value or hexadecimal of the Unicode character you want to represent and finally adding the semicolon character \";\". Representation of the Euro character (\u20ac) in XML Given the XML document \"products.xml\": <? xml version = \"1.0\" encoding = \"UTF-8\"?> <products> <name price = \"12.56&#8364;\" > Wool hat </name> <name price = \"16.99&#x20AC;\" > Fleece cap </name> </products> When viewing in a web browser, you can see the following: It should be noted that, in this case, to represent the symbol of the Euro (\u20ac), its value has been used for the first time. decimal ( &#8364; ) in Unicode and, the second time, its hexadecimal value ( &#x20AC; ). Comments in XML \u00b6 To write comments to an XML document, they must be written between the characters <!-- and --> . For example: <!-- This is a comment written in an XML document --> Given the XML file \"letras.xml\": <?xml version = \"1.0\" encoding = \"UTF-8\"?> <!-- Example use of comments .--> <a> <b> <c quantity= \"4\" > cccc </c> <d quantity= \"2\" > dd </d> </b> <e> <f quantity= \"8\" > ffffffff </f> <!-- g may appear several times --> <g quantity= \"5\" > ggggg </g> <g quantity= \"2\" > gg </g> </e> </a> In a browser you will see: In an XML document, comments cannot be written within tags. For example, it is incorrect to write: <element <!-- empty element -- > /> On the other hand, it should be noted that in the comments of an XML document it is not allowed to use two consecutive hyphens: <!-- two hyphens in a row - in a comment gives error --> So, it is not possible to nest comments in an XML document. CDATA sections in XML \u00b6 An XML document can contain CDATA ( Character DATA ) sections for writing text that is not intended to be parsed. For example, this can be useful when you want to type text that contains any of the problematic characters: less than < o ampersand & . In an XML document, to include a CDATA section, we must start with the character string < ![CDATA [ and ending with the characters ]]>. A CDATA section may contain, for example, the source code of a program written in the C language: <? xml version = \"1.0\" encoding = \"UTF-8\"?> <CDATA_example> <![CDATA [ #include <stdio.h> int main () { float note; printf (\"\\n Enter note (real):\"); scanf (\"%f\", &note); if (5 < = note) printf (\"\\n APPROVED\"); return 0; } ]]> </CDATA_example> A web browser will display something like: The string \"]]>\" cannot be written within a CDATA section. Consequently, CDATA sections cannot be nested. On the other hand, it is not allowed to write whitespace or line breaks in start strings \"<![CDATA [\" or end \"]]>\" of a CDATA section Editing tools \u00b6 To edit XML documents it is enough to have a plain text editor, such as Notepad or Pluma , but we can also use some specific editors like XML Copy Editor or an IDE with some plugin like Visual Studio Code with XML Tools and XML by Red Hat. Preparation of well-formed XML documents \u00b6 An XML document is said to be well-formed when it has no syntax errors. This includes the following aspects: Element names and their attributes must be spelled correctly. Attribute values \u200b\u200bmust be enclosed in double or single quotes. The attributes of an element must be separated by whitespace. References to entities should be used where necessary. There must be a single root element. Every element must have a parent element except the root element. All items must have an opening label and a closing label. Labels must be nested correctly. The XML declaration must be in the first line written correctly. The CDATA sections and comments must be spelled correctly. Using namespaces in XML \u00b6 XML namespaces are a mechanism for ensuring that the elements and attributes of an XML document have names unique. They are defined in a W3C recommendation. The problem they solve is the ambiguity that arises when a document XML contains names of elements or attributes from various vocabularies and results in various elements or attributes homonyms (with the same name): if each vocabulary is given a different namespace, the ambiguity is resolved. For example: <menu> <option> Save </option> <description> Save the current document </description> </menu> <menu> <meats> <veal_steak price = \"12.95\" /> <sirloin_staeck price = \"13.60\" /> </meats> <fishes> <baked_salmon price = \"16.20\" /> <hake_in_green_sauce price = \"15.85\" /> </fishes> </menu> So, if the <menu> elements are included in an XML document, a name conflict arises. To solve it, namespaces can be used. For example, typing: <?xml version = \"1.0\" encoding = \"UTF-8\"?> <e1:example xmlns:e1= \"http://www.abrirllave.com/example1\" xmlns:e2= \"http://www.abrirllave.com/ejemplo2\" > <e1:menu> <e1:option> Save </e1:option> <e1:description> Save the current document </e1:description> </e1:menu> <e2:menu> <e2:meats> <e2:veal_steak price = \"12.95\" /> <e2:sirloin_staeck price = \"13.60\" /> </e2:meats> <e2:fishes> <e2:baked_salmon price = \"16.20\" /> <e2:hake_in_green_sauce price = \"15.85\" /> </e2:fishes> </e2:menu> </e1:example> The following syntax is used to define a namespace: xmlns: prefix = \"URI\" In the example, notice that, xmlns is an attribute that was used in the start tag of the element <example> and, in this case, two namespaces have been defined that refer to the following URIs ( Uniform Resource Identifier , Uniform Resource Identifier): http://www.abrirllave.com/example1 http://www.abrirllave.com/example2 The defined prefixes are e1 and e2 , respectively. Prefixes have been added to the tags that appear in the document: <e1: menu> , <e2: menu> , <e1: option> , etc. Defining a default namespace \u00b6 Alternatively, a default namespace can be defined using the following syntax: xmlns=\"URI\" In this way, both the element where the namespace has been defined, and all its successors (children, children of children, etc.), must belong to this namespace. For example: <?xml version = \"1.0\" encoding = \"UTF-8\"?> <example xmlns= \"http://www.abrirllave.com/example1\" > <menu> <option> Save </option> <description> Save the current document </description> </menu> In the following example, a default namespace is initially defined for the <example> element and its contents. in it. However, a second namespace is then defined, which by default affects the second <menu> element that appears in the document and its successors: , , ` ... <?xml version = \"1.0\" encoding = \"UTF-8\"?> <example xmlns= \"http://www.abrirllave.com/example1\" > <menu> <option> Save </option> <description> Save the current document </description> </menu> <menu xmlns= \"http://www.abrirllave.com/example2\" > <meats> <veal_steak price = \"12.95\" /> <sirloin_staeck price = \"13.60\" /> </meats> <fishes> <baked_salmon price = \"16.20\" /> <hake_in_green_sauce price = \"15.85\" /> </fishes> </menu> </example> In an XML document, to indicate that certain elements -or all- do not belong to any namespace, the attribute is written xmlns empty, that is, xmlns=\"\" . <?xml version = \"1.0\" encoding = \"UTF-8\"?> <example xmlns= \"http://www.abrirllave.com/example1\" > <menu> <option> Save </option> <description> Save the current document </description> </menu> <menu xmlns= \"http://www.abrirllave.com/example2\" > <meats> <veal_steak price = \"12.95\" /> <sirloin_staeck price = \"13.60\" /> </meats> <fishes xmlns= \"\" > <baked_salmon price = \"16.20\" /> <hake_in_green_sauce price = \"15.85\" /> </fishes> </menu> </example> In this case, the element and its children do not belong in any namespace. Activities \u00b6 Task 121. XML syntax errors Review the following XML document, detect errors, and rewrite it correctly <?xml version=\"1.0\" encoding=\"UTF-8\"?> <frutas> </frutas> < frutas > < fruta > < nombre > cereza < nombre \\ > < fruta \\ > < fruta > < nombre > naranja < nombre \\ > < fruta \\ > < frutas \\ > Task 122. Creating XML documents Write an XML document that stores the following information: Cities Name Country Continent New Delhi India Asia Lisbon Portugal Europe Cairo Egypt Africa Note: The continent must be represented by an attribute. Historical facts Note: only the description of each fact must be represented by an attribute. Task 123: The DAW modules Create an XML document in order to store the modules of the DAW training cycle indicating how many hours last each module and the year in which is taught. Task 124: Well-formed XML documents Resolve the tasks in the follow document: Activity statement . Bibliography, webography and credits \u00b6 Wikipedia contributors. (2020, September 13). Markup language. In Wikipedia, The Free Encyclopedia. Retrieved 15:51, September 15, 2020, from https://en.wikipedia.org/w/index.php?title=Markup_language&oldid=978142210 Carlos Pes. (Febrer de 2017). Lenguajes de Marcas y Sistemas de Gesti\u00f3n de Informaci\u00f3n (LMSGI) disponible en Tutorial de LMSGI Bartolom\u00e9 Sint\u00e9s Marco. (Juny de 2020). XML: Lenguaje de marcas extensible , disponible en https://www.mclibre.org/consultar/xml/ Mozilla Contributors (June 2021). XML introduction . Available at https://developer.mozilla.org/en-US/docs/Web/XML/XML_introduction IBM Corporation. (June 2020). XML Syntax Rules . Available at https://www.ibm.com/docs/en/scbn?topic=syntax-xml-rules","title":"2. XML"},{"location":"01.%20Markup%20languages.%20XML/02_xml/#2-xml","text":"","title":"2. XML"},{"location":"01.%20Markup%20languages.%20XML/02_xml/#introduction","text":"Extensible Markup Language (XML) is a markup language that defines a set of rules for encoding documents in a format that is both human-readable and machine-readable. The World Wide Web Consortium's XML 1.0 Specification of 1998 and several other related specifications\u2014all of them free open standards\u2014define XML. The design goals of XML emphasize simplicity, generality, and usability across the Internet.It is a textual data format with strong support via Unicode for different human languages. Although the design of XML focuses on documents, the language is widely used for the representation of arbitrary data structures such as those used in web services. World Web Consortium The World Wide Web Consortium (W3C) is the main international standards organization for the World Wide Web. Founded in 1994 and currently led by Tim Berners-Lee, the consortium is made up of member organizations that maintain full-time staff working together in the development of standards for the World Wide Web. As of 21 October 2019, W3C had 443 members. W3C also engages in education and outreach, develops software and serves as an open forum for discussion about the Web. XML is a markup language similar to HTML, but without predefined tags to use. Instead, you define your own tags (extensible) designed specifically for your needs. This is a powerful way to store data in a format that can be stored, searched, and shared. Most importantly, since the fundamental format of XML is standardized, if you share or transmit XML across systems or platforms, either locally or over the internet, the recipient can still parse the data due to the standardized XML syntax. These are some languages based on XML: GML ( Geography Markup Language ). MathML ( Mathematical Markup Language ). RSS ( Really Simple Syndication ). SVG ( Scalable Vector Graphics ). XHTML ( eXtensible HyperText Markup Language ).","title":"Introduction"},{"location":"01.%20Markup%20languages.%20XML/02_xml/#key-terminology","text":"The material in this section is based on the XML Specification. This is not an exhaustive list of all the constructs that appear in XML; it provides an introduction to the key constructs most often encountered in day-to-day use.","title":"Key terminology"},{"location":"01.%20Markup%20languages.%20XML/02_xml/#character","text":"An XML document is a string of characters. Almost every legal Unicode character may appear in an XML document.","title":"Character"},{"location":"01.%20Markup%20languages.%20XML/02_xml/#processor-and-application","text":"The processor analyzes the markup and passes structured information to an application. The specification places requirements on what an XML processor must do and not do, but the application is outside its scope. The processor (as the specification calls it) is often referred to colloquially as an XML parser.","title":"Processor and application"},{"location":"01.%20Markup%20languages.%20XML/02_xml/#markup-and-content","text":"The characters making up an XML document are divided into markup and content, which may be distinguished by the application of simple syntactic rules. Generally, strings that constitute markup either begin with the character < and end with a > , or they begin with the character & and end with a ; . Strings of characters that are not markup are content. However, in a CDATA section, the delimiters <![CDATA[ and ]]> are classified as markup, while the text between them is classified as content. In addition, whitespace before and after the outermost element is classified as markup.","title":"Markup and content"},{"location":"01.%20Markup%20languages.%20XML/02_xml/#tag","text":"A tag is a markup construct that begins with < and ends with > . Tags come in three flavors: start-tag, such as <section> ; end-tag, such as </section> ; empty-element tag, such as <line-break /> .","title":"Tag"},{"location":"01.%20Markup%20languages.%20XML/02_xml/#element","text":"An element is a logical document component that either begins with a start-tag and ends with a matching end-tag or consists only of an empty-element tag. The characters between the start-tag and end-tag, if any, are the element's content, and may contain markup, including other elements, which are called child elements. An example is <greeting>Hello, world!</greeting> . Another is <line-break /> .","title":"Element"},{"location":"01.%20Markup%20languages.%20XML/02_xml/#attribute","text":"An attribute is a markup construct consisting of a name\u2013value pair that exists within a start-tag or empty-element tag. An example is <img src=\"madonna.jpg\" alt=\"Madonna\" /> , where the names of the attributes are \"src\" and \"alt\" , and their values are \"madonna.jpg\" and \"Madonna\" respectively. Another example is <step number=\"3\">Connect A to B.</step> , where the name of the attribute is \"number\" and its value is \"3\" . An XML attribute can only have a single value and each attribute can appear at most once on each element. In the common situation where a list of multiple values is desired, this must be done by encoding the list into a well-formed XML attribute with some format beyond what XML defines itself. Usually this is either a comma or semi-colon delimited list or, if the individual values are known not to contain spaces, a space-delimited list can be used. <div class=\"inner greeting-box\">Welcome!</div> , where the attribute \"class\" has both the value \"inner greeting-box\" and also indicates the two CSS class names \"inner\" and \"greeting-box\" .","title":"Attribute"},{"location":"01.%20Markup%20languages.%20XML/02_xml/#xml-declaration","text":"XML documents may begin with an XML declaration that describes some information about themselves. An example is <?xml version=\"1.0\" encoding=\"UTF-8\"?> .","title":"XML declaration"},{"location":"01.%20Markup%20languages.%20XML/02_xml/#entities","text":"Like HTML, XML offers methods (called entities) for referring to some special reserved characters (such as a greater than sign which is used for tags). There are five of these characters that you should know: Character Description Entity < lt ( less than ) &lt; > gt ( greater than ) &gt; \" quot ( quotation mark ) &quot; ' apos ( apostrophe ) &apos; & (ampersand) amp ( ampersand ) &amp; Given the \"entities.xml\" file: <? xml version = \"1.0\" encoding = \"UTF-8\"?> <entities> <less_than> &lt; </less_than> <greater_than> &gt; </greater_than> <double_quote> &quot; </double_quote> <simple_quote> &apos; </simple_quote> <ampersand> &amp; </ampersand> </entities> When you open it in Google Chrome you can see: In the web browser, you can see where the references to entities have been written in the XML document (for example), the corresponding characters are displayed (for example <).","title":"Entities"},{"location":"01.%20Markup%20languages.%20XML/02_xml/#structure-and-syntax","text":"XML documents are composed by plain text and tags defined by developers. Elements are represented by tags . If we want to save people's name we should write: <name> Elsa </name> This is the basic syntax in order to write an XML elemente: <tag> text </tag> It is important to remark that between the start tag ( <stag> ) and the end tag ( </tag> ) we have written the data ( text ) we would storage. Elsa in the example.","title":"Structure and syntax"},{"location":"01.%20Markup%20languages.%20XML/02_xml/#empty-tags","text":"In a XML document an element could not contain any value. If so, we should write: <tag></tag> A simpler alternative way of writing this is kind of elements is: <tag /> To write an empty element name , we should write: <name></name> Or: <name />","title":"Empty tags"},{"location":"01.%20Markup%20languages.%20XML/02_xml/#relation-between-parent-and-childs","text":"An parent element could contain one or many elements: <people> <name> Elsa </name> <woman /> <birthday> <day> 18 </day> <month> 6 </month> <year> 1996 </year> </birthday> <city> Pamplona </city> </people> In this example, the people element contains four elements (children): \"name\", \"woman\", \"birthday\" and \"city\". In addition, the \"birthday\" element contains three elements (children): \"day\", \"month\" and \"year\". Notice that of all the elements in this example, only the \"woman\" element is empty.","title":"Relation between parent and childs"},{"location":"01.%20Markup%20languages.%20XML/02_xml/#root-element","text":"Each XML document has exactly one single root element . It encloses all the other elements and is therefore the sole parent element to all the other elements. ROOT elements are also called document elements. In HTML, the root element is the <html> element. In our example, the people element is the document root. Graphically, we could represent it: graph TD A[people] --> B[name] A[people] --> C[woman] A[people] --> D[birthday] A[people] --> E[city] D --> F[day] D --> G[month] D --> H[year] In this way, the structure of any XML document can be represented as an inverted tree of elements. It is said that the elements are the ones that give semantic structure to the document.","title":"Root element"},{"location":"01.%20Markup%20languages.%20XML/02_xml/#elements-with-mixed-content","text":"An element type has mixed content when elements of that type may contain character data, optionally interspersed with child elements. In this case, the types of the child elements may be constrained, but not their order or their number of occurrences: <description> character data <br/> more text <br/> and <strong> more data </strong> </description> Mixed content is a very effective way of marking up textual data, the most obvious example being HTML.","title":"Elements with mixed content"},{"location":"01.%20Markup%20languages.%20XML/02_xml/#xml-syntax-rules","text":"You must follow these rules when you create XML syntax: All XML elements must have a closing tag. XML tags are case sensitive. All XML elements must be properly nested. All XML documents must have a root element. Attribute values must always be quoted.","title":"XML Syntax Rules"},{"location":"01.%20Markup%20languages.%20XML/02_xml/#all-xml-elements-must-have-a-closing-tag","text":"It is illegal to omit the closing tag when you are creating XML syntax. XML elements must have a closing tag. Incorrect: <body> See Spot run. <body> See Spot catch the ball. Correct: <body> See Spot run. </body> <body> See Spot catch the ball. </body>","title":"All XML elements must have a closing tag"},{"location":"01.%20Markup%20languages.%20XML/02_xml/#all-xml-elements-must-be-properly-nested","text":"Improper nesting of tags makes no sense to XML. Incorrect: <b><i>This text is bold and italic.</b></i> Correct: <b><i> This text is bold and italic. </i></b>","title":"All XML elements must be properly nested"},{"location":"01.%20Markup%20languages.%20XML/02_xml/#all-xml-documents-must-have-a-root-element","text":"All XML documents must contain a single tag pair to define a root element. All other elements must be within this root element. All elements can have sub elements (child elements). Sub elements must be correctly nested within their parent element. Example: <root> <child> <subchild> ..... </subchild> </child> </root>","title":"All XML documents must have a root element"},{"location":"01.%20Markup%20languages.%20XML/02_xml/#attribute-values-must-always-be-quoted","text":"It is illegal to omit quotation marks around attribute values. XML elements can have attributes in name/value pairs; however, the attribute value must always be quoted. Incorrect: <?xml version= \u201c1.0\u201d encoding=\u201cISO-8859-1\u201d?> <note date= 05/05/05 > <to> Dick </to> <from> Jane </from> </note> Correct: <?xml version= \u201c1.0\u201d encoding=\u201cISO-8859-1\u201d?> <note date= \u201d05/05/05\u201d > <to> Dick </to> <from> Jane </from> </note> In the incorrect document, the date attribute in the note element is not quoted.","title":"Attribute values must always be quoted"},{"location":"01.%20Markup%20languages.%20XML/02_xml/#xml-tags-are-case-sensitive","text":"When you create XML documents, the tag is different from the tag . Incorrect: <Body>See Spot run.</body> Correct: <body> See Spot run. </body> In addition, they have to fullfil the follow rules: They can contain lowercase letters, uppercase letters, numbers, periods \".\", hyphens \"-\" and underscores \"_\". They can also contain the colon \":\". However, its use is reserved for when define namespaces. The first character must be a letter or a hyphen under \"_\". The following elements are breaking some rules: <ciudad> Pamplona </ciudad> <d\u00eda> 18 </dia> <mes> 6 <mes/> <ciudad> Pamplona </finciudad> <_rojo> <2colores> Rojo y Naranja </2colores> <persona><nombre> Elsa </persona></nombre> <color favorito > azul < /color favorito> We must write them: <ciudad> Pamplona </ciudad> <d\u00eda> 18 </d\u00eda> <mes> 6 </mes> <ciudad> Pamplona </ciudad> <_rojo/> <colores2> Rojo y Naranja </colores2> <Aficiones > Cine, Bailar, Nadar </Aficiones > <persona><nombre> Elsa </nombre></persona> <color.favorito> azul </color.favorito> <color-favorito> azul </color-favorito> <color_favorito> azul </color_favorito> Non-English letters (\u00e1, \u00c1, \u00f1, \u00d1 ...) are allowed. However, it is advisable not to use them in order to reduce possible incompatibilities with programs that may not recognize them. As for the hyphen - and period . characters, although they are also allowed to name tags, it is also advisable to avoid its use.","title":"XML tags are case sensitive"},{"location":"01.%20Markup%20languages.%20XML/02_xml/#attributes-in-xml","text":"Elements of an XML document can have attributes defined in the start tag. An attribute serves to provide extra information about the item that contains it. Given the following data for a product: Code: G45 Name: Wool hat Color: black Price: 12.56 Its representation in an XML document could be, for example: <product code = \"G45\" > <name color = \"black\" price = \"12.56\" > Wool hat </ name> </ product> In this example three attributes have been written: code, color and price. It should be noted that, its values \u200b\u200b(\"G45\", \"black\" and \"12.56\") have been enclosed in double quotes (\"). However, they can also be enclosed in single quotes ('). If, for example, the code attribute were to be represented as an element, it could be written: <product> <code> G45 </code> <name color = \"black\" price = \"12.56\" > Wool hat </ name> </ product> As you can see, now the value of the code has not been written in double quotes.","title":"Attributes in XML"},{"location":"01.%20Markup%20languages.%20XML/02_xml/#elements-and-attributes","text":"An element is a logical component of an XML document. The elements usually have their own entity. The content of an item is everything between the opening and closing tags, even if they contain other elements (children). In contrast, attributes usually represent properties or characteristics of elements.","title":"Elements and attributes"},{"location":"01.%20Markup%20languages.%20XML/02_xml/#syntax-rules","text":"Attribute names must meet the same syntax rules as element names. In addition, all attributes of an element must be unique. For example, it is incorrect to write: <data x= \"3\" x= \"4\" i= \"5\" /> However, it is correct to write: <data x= \"3\" X= \"4\" i= \"5\" /> Attributes contained in an element, as in this case x, X and y, must be separated by whitespace, and is not significant his order.","title":"Syntax rules"},{"location":"01.%20Markup%20languages.%20XML/02_xml/#xml-declaration_1","text":"The XML declaration that can be written at the beginning of an XML document begins with the characters \"<?\" and ends with \"?>\".","title":"XML declaration"},{"location":"01.%20Markup%20languages.%20XML/02_xml/#version-and-coding","text":"An XML document could contain the following XML declaration: <? xml version = \"1.0\" encoding = \"UTF-8\"?> In this XML statement, you are indicating that 1.0 is the version of XML used in the document and UTF-8 (8-bit Unicode Transformation Format , 8-bit Unicode Transformation Format) is the character encoding employee. An XML declaration is not required to appear in an XML document. However, if it includes it, it must appear in the first line of the document, and the \"<\" character must be the first of that line, that is, blank spaces cannot appear before.","title":"Version and coding"},{"location":"01.%20Markup%20languages.%20XML/02_xml/#standalone-attribute","text":"In an XML declaration, in addition to the version and encoding of the attributes, the standalone attribute can also be written, which can take two values \u200b\u200b(\"yes\" or \"no\"): <?xml version = \"1.0\" encoding = \"UTF-8\" standalone = \"yes\"?> Typing standalone =\" yes \" indicates that the document is independent of others, such as one DTD ( Document Type Definition , external Definition (or we will see later). Otherwise, would mean that the document is not independent. In an XML document, writing the XML declaration is optional. But, if written, the version attribute is required. However, the encoding and standalone attributes are optional, and by default their values \u200b\u200bare \"UTF-8\" and \"no\". respectively. On the other hand, when typing the encoding attribute, it should always appear after the version. And, the attribute standalone , as long as it exists, must be in the last place.","title":"standalone attribute"},{"location":"01.%20Markup%20languages.%20XML/02_xml/#problematic-characters-in-xml-less-than-and-ampersand","text":"In an XML document, the \"<\" character is problematic because it indicates the beginning of a tag. So, instead of writing, for example: <condition> a < b </condition > The entity reference should be used by typing: <condition> a &lt; b </condition> The > character can be used in the text contained in an element, and it is not incorrect to write, for example: <condition> a > b </condition> However, it is recommended to use your entity reference ( &gt; ). In an XML document, the ampersand character is also problematic, as it is used to indicate the beginning of an reference to entity. For example, it is incorrect to write: <condition> a==1 && b==2 </condition> Instead, write the following: <condition> a==1 &amp;&amp; b==2 </condition>","title":"Problematic characters in XML: less than (&lt;) and ampersand (&amp;)"},{"location":"01.%20Markup%20languages.%20XML/02_xml/#character-references-in-xml","text":"Unicode character references with &# symbols can be written in an XML document, followed by the decimal value or hexadecimal of the Unicode character you want to represent and finally adding the semicolon character \";\". Representation of the Euro character (\u20ac) in XML Given the XML document \"products.xml\": <? xml version = \"1.0\" encoding = \"UTF-8\"?> <products> <name price = \"12.56&#8364;\" > Wool hat </name> <name price = \"16.99&#x20AC;\" > Fleece cap </name> </products> When viewing in a web browser, you can see the following: It should be noted that, in this case, to represent the symbol of the Euro (\u20ac), its value has been used for the first time. decimal ( &#8364; ) in Unicode and, the second time, its hexadecimal value ( &#x20AC; ).","title":"Character references in XML"},{"location":"01.%20Markup%20languages.%20XML/02_xml/#comments-in-xml","text":"To write comments to an XML document, they must be written between the characters <!-- and --> . For example: <!-- This is a comment written in an XML document --> Given the XML file \"letras.xml\": <?xml version = \"1.0\" encoding = \"UTF-8\"?> <!-- Example use of comments .--> <a> <b> <c quantity= \"4\" > cccc </c> <d quantity= \"2\" > dd </d> </b> <e> <f quantity= \"8\" > ffffffff </f> <!-- g may appear several times --> <g quantity= \"5\" > ggggg </g> <g quantity= \"2\" > gg </g> </e> </a> In a browser you will see: In an XML document, comments cannot be written within tags. For example, it is incorrect to write: <element <!-- empty element -- > /> On the other hand, it should be noted that in the comments of an XML document it is not allowed to use two consecutive hyphens: <!-- two hyphens in a row - in a comment gives error --> So, it is not possible to nest comments in an XML document.","title":"Comments in XML"},{"location":"01.%20Markup%20languages.%20XML/02_xml/#cdata-sections-in-xml","text":"An XML document can contain CDATA ( Character DATA ) sections for writing text that is not intended to be parsed. For example, this can be useful when you want to type text that contains any of the problematic characters: less than < o ampersand & . In an XML document, to include a CDATA section, we must start with the character string < ![CDATA [ and ending with the characters ]]>. A CDATA section may contain, for example, the source code of a program written in the C language: <? xml version = \"1.0\" encoding = \"UTF-8\"?> <CDATA_example> <![CDATA [ #include <stdio.h> int main () { float note; printf (\"\\n Enter note (real):\"); scanf (\"%f\", &note); if (5 < = note) printf (\"\\n APPROVED\"); return 0; } ]]> </CDATA_example> A web browser will display something like: The string \"]]>\" cannot be written within a CDATA section. Consequently, CDATA sections cannot be nested. On the other hand, it is not allowed to write whitespace or line breaks in start strings \"<![CDATA [\" or end \"]]>\" of a CDATA section","title":"CDATA sections in XML"},{"location":"01.%20Markup%20languages.%20XML/02_xml/#editing-tools","text":"To edit XML documents it is enough to have a plain text editor, such as Notepad or Pluma , but we can also use some specific editors like XML Copy Editor or an IDE with some plugin like Visual Studio Code with XML Tools and XML by Red Hat.","title":"Editing tools"},{"location":"01.%20Markup%20languages.%20XML/02_xml/#preparation-of-well-formed-xml-documents","text":"An XML document is said to be well-formed when it has no syntax errors. This includes the following aspects: Element names and their attributes must be spelled correctly. Attribute values \u200b\u200bmust be enclosed in double or single quotes. The attributes of an element must be separated by whitespace. References to entities should be used where necessary. There must be a single root element. Every element must have a parent element except the root element. All items must have an opening label and a closing label. Labels must be nested correctly. The XML declaration must be in the first line written correctly. The CDATA sections and comments must be spelled correctly.","title":"Preparation of well-formed XML documents"},{"location":"01.%20Markup%20languages.%20XML/02_xml/#using-namespaces-in-xml","text":"XML namespaces are a mechanism for ensuring that the elements and attributes of an XML document have names unique. They are defined in a W3C recommendation. The problem they solve is the ambiguity that arises when a document XML contains names of elements or attributes from various vocabularies and results in various elements or attributes homonyms (with the same name): if each vocabulary is given a different namespace, the ambiguity is resolved. For example: <menu> <option> Save </option> <description> Save the current document </description> </menu> <menu> <meats> <veal_steak price = \"12.95\" /> <sirloin_staeck price = \"13.60\" /> </meats> <fishes> <baked_salmon price = \"16.20\" /> <hake_in_green_sauce price = \"15.85\" /> </fishes> </menu> So, if the <menu> elements are included in an XML document, a name conflict arises. To solve it, namespaces can be used. For example, typing: <?xml version = \"1.0\" encoding = \"UTF-8\"?> <e1:example xmlns:e1= \"http://www.abrirllave.com/example1\" xmlns:e2= \"http://www.abrirllave.com/ejemplo2\" > <e1:menu> <e1:option> Save </e1:option> <e1:description> Save the current document </e1:description> </e1:menu> <e2:menu> <e2:meats> <e2:veal_steak price = \"12.95\" /> <e2:sirloin_staeck price = \"13.60\" /> </e2:meats> <e2:fishes> <e2:baked_salmon price = \"16.20\" /> <e2:hake_in_green_sauce price = \"15.85\" /> </e2:fishes> </e2:menu> </e1:example> The following syntax is used to define a namespace: xmlns: prefix = \"URI\" In the example, notice that, xmlns is an attribute that was used in the start tag of the element <example> and, in this case, two namespaces have been defined that refer to the following URIs ( Uniform Resource Identifier , Uniform Resource Identifier): http://www.abrirllave.com/example1 http://www.abrirllave.com/example2 The defined prefixes are e1 and e2 , respectively. Prefixes have been added to the tags that appear in the document: <e1: menu> , <e2: menu> , <e1: option> , etc.","title":"Using namespaces in XML"},{"location":"01.%20Markup%20languages.%20XML/02_xml/#defining-a-default-namespace","text":"Alternatively, a default namespace can be defined using the following syntax: xmlns=\"URI\" In this way, both the element where the namespace has been defined, and all its successors (children, children of children, etc.), must belong to this namespace. For example: <?xml version = \"1.0\" encoding = \"UTF-8\"?> <example xmlns= \"http://www.abrirllave.com/example1\" > <menu> <option> Save </option> <description> Save the current document </description> </menu> In the following example, a default namespace is initially defined for the <example> element and its contents. in it. However, a second namespace is then defined, which by default affects the second <menu> element that appears in the document and its successors: , , ` ... <?xml version = \"1.0\" encoding = \"UTF-8\"?> <example xmlns= \"http://www.abrirllave.com/example1\" > <menu> <option> Save </option> <description> Save the current document </description> </menu> <menu xmlns= \"http://www.abrirllave.com/example2\" > <meats> <veal_steak price = \"12.95\" /> <sirloin_staeck price = \"13.60\" /> </meats> <fishes> <baked_salmon price = \"16.20\" /> <hake_in_green_sauce price = \"15.85\" /> </fishes> </menu> </example> In an XML document, to indicate that certain elements -or all- do not belong to any namespace, the attribute is written xmlns empty, that is, xmlns=\"\" . <?xml version = \"1.0\" encoding = \"UTF-8\"?> <example xmlns= \"http://www.abrirllave.com/example1\" > <menu> <option> Save </option> <description> Save the current document </description> </menu> <menu xmlns= \"http://www.abrirllave.com/example2\" > <meats> <veal_steak price = \"12.95\" /> <sirloin_staeck price = \"13.60\" /> </meats> <fishes xmlns= \"\" > <baked_salmon price = \"16.20\" /> <hake_in_green_sauce price = \"15.85\" /> </fishes> </menu> </example> In this case, the element and its children do not belong in any namespace.","title":"Defining a default namespace"},{"location":"01.%20Markup%20languages.%20XML/02_xml/#activities","text":"Task 121. XML syntax errors Review the following XML document, detect errors, and rewrite it correctly <?xml version=\"1.0\" encoding=\"UTF-8\"?> <frutas> </frutas> < frutas > < fruta > < nombre > cereza < nombre \\ > < fruta \\ > < fruta > < nombre > naranja < nombre \\ > < fruta \\ > < frutas \\ > Task 122. Creating XML documents Write an XML document that stores the following information: Cities Name Country Continent New Delhi India Asia Lisbon Portugal Europe Cairo Egypt Africa Note: The continent must be represented by an attribute. Historical facts Note: only the description of each fact must be represented by an attribute. Task 123: The DAW modules Create an XML document in order to store the modules of the DAW training cycle indicating how many hours last each module and the year in which is taught. Task 124: Well-formed XML documents Resolve the tasks in the follow document: Activity statement .","title":"Activities"},{"location":"01.%20Markup%20languages.%20XML/02_xml/#bibliography-webography-and-credits","text":"Wikipedia contributors. (2020, September 13). Markup language. In Wikipedia, The Free Encyclopedia. Retrieved 15:51, September 15, 2020, from https://en.wikipedia.org/w/index.php?title=Markup_language&oldid=978142210 Carlos Pes. (Febrer de 2017). Lenguajes de Marcas y Sistemas de Gesti\u00f3n de Informaci\u00f3n (LMSGI) disponible en Tutorial de LMSGI Bartolom\u00e9 Sint\u00e9s Marco. (Juny de 2020). XML: Lenguaje de marcas extensible , disponible en https://www.mclibre.org/consultar/xml/ Mozilla Contributors (June 2021). XML introduction . Available at https://developer.mozilla.org/en-US/docs/Web/XML/XML_introduction IBM Corporation. (June 2020). XML Syntax Rules . Available at https://www.ibm.com/docs/en/scbn?topic=syntax-xml-rules","title":"Bibliography, webography and credits"}]}